---
import Layout from '../../layouts/Layout.astro';
import { getAllArtifacts, getArtifactByFileName, getArtifactPaths, getAdjacentArtifacts, getArtifactContent } from '../../utils/artifacts';
import ArtifactRenderer from '../../utils/renderers/ArtifactRenderer';
import { siteConfig } from '../../config.js';

export async function getStaticPaths() {
  const paths = await getArtifactPaths();
  
  // Add source code to each path's props
  return paths.map(path => {
    const { params, props } = path;
    const { name } = props;
    
    // Get the source code during the build phase
    const sourceCode = getArtifactContent(name) || `// Could not load source code for ${name}`;
    
    return {
      params,
      props: {
        ...props,
        sourceCode
      }
    };
  });
}
const { artifact } = Astro.params;
// Props come directly from getStaticPaths with added sourceCode
const { fileName, name, path: filePath, metadata, sourceCode } = Astro.props;

if (!fileName) {
  return Astro.redirect('/404');
}
// Get the component from the artifactComponents map
// Remove .jsx or .tsx extension if it exists in the fileName
const componentName = fileName.replace(/\.(jsx|tsx)$/, '');

// Get the adjacent artifacts for navigation
const { previousArtifact, nextArtifact } = getAdjacentArtifacts(name);
---
<Layout title={`${siteConfig.title} - ${name}`}>
  <div class="container mx-auto px-4 py-8">
    <header class="mb-8">
      <a href="/" class="text-blue-500 hover:text-blue-700 mb-2 inline-block">
        &larr; Back to all artifacts
      </a>
      
      <div class="flex justify-between items-center my-4">
        {previousArtifact && (
          <a href={`/artifacts/${previousArtifact.name}`} class="text-blue-500 hover:text-blue-700 flex items-center px-3 py-2 border border-blue-300 rounded-md transition-colors duration-200 hover:bg-blue-50">
            <span class="mr-2">&larr;</span>
            <span class="inline">Previous</span>
            <span class="hidden sm:inline ml-1">: {previousArtifact.metadata.title || previousArtifact.name}</span>
          </a>
        )}
        {nextArtifact && (
          <a href={`/artifacts/${nextArtifact.name}`} class="text-blue-500 hover:text-blue-700 flex items-center px-3 py-2 border border-blue-300 rounded-md transition-colors duration-200 hover:bg-blue-50">
            <span class="inline">Next</span>
            <span class="hidden sm:inline mr-1">: {nextArtifact.metadata.title || nextArtifact.name}</span>
            <span class="ml-2">&rarr;</span>
          </a>
        )}
      </div>
      
      <h1 class="text-3xl font-bold">{name}</h1>
      {metadata?.description && siteConfig.artifacts.showDescription && (
        <p class="text-gray-600 mt-2">{metadata.description}</p>
      )}
    </header>

    <div class="bg-white rounded-lg shadow-md p-6">
      {/* Render the React component */}
      <div id="artifact-container" class="artifact-content" data-artifact-name={fileName}>
        <ArtifactRenderer client:load componentName={componentName} />
      </div>
      
      <div class="mt-6 flex justify-center">
        <button id="showCodeBtn" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md transition-colors duration-200 flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4" />
          </svg>
          <span id="btnText">Show Code</span>
        </button>
      </div>
      
      <div id="codeViewer" class="mt-6 hidden">
        <div class="bg-gray-800 rounded-lg p-4 overflow-x-auto">
          <pre id="codeContent" class="text-gray-100 font-mono text-sm whitespace-pre language-jsx">{sourceCode}</pre>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Wait for the DOM to be fully loaded
  document.addEventListener('DOMContentLoaded', () => {
    const showCodeBtn = document.getElementById('showCodeBtn');
    const codeViewer = document.getElementById('codeViewer');
    const btnText = document.getElementById('btnText');
    
    if (showCodeBtn && codeViewer && btnText) {
      let isCodeVisible = false;
      
      // Add click event listener to the button
      showCodeBtn.addEventListener('click', () => {
        isCodeVisible = !isCodeVisible;
        
        // Toggle the visibility of the code viewer
        if (isCodeVisible) {
          codeViewer.classList.remove('hidden');
          btnText.textContent = 'Hide Code';
        } else {
          codeViewer.classList.add('hidden');
          btnText.textContent = 'Show Code';
        }
      });
    }
  });
</script>

<style>
  /* Add styles for code syntax highlighting */
  #codeViewer {
    transition: all 0.3s ease;
  }
  
  pre {
    max-height: 600px;
    overflow-y: auto;
    /* Add scrollbar styles */
    scrollbar-width: thin;
    scrollbar-color: rgba(156, 163, 175, 0.5) rgba(31, 41, 55, 0.8);
  }
  
  pre::-webkit-scrollbar {
    width: 8px;
    height: 8px;
  }
  
  pre::-webkit-scrollbar-track {
    background: rgba(31, 41, 55, 0.8);
    border-radius: 4px;
  }
  
  pre::-webkit-scrollbar-thumb {
    background-color: rgba(156, 163, 175, 0.5);
    border-radius: 4px;
  }
</style>
