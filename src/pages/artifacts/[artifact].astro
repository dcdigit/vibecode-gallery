---
import Layout from '../../layouts/Layout.astro';
import { getAllArtifacts, getArtifactByFileName, getArtifactPaths, getAdjacentArtifacts } from '../../utils/artifacts';
import ArtifactRenderer from '../../utils/renderers/ArtifactRenderer';
import { siteConfig } from '../../config.js';

export async function getStaticPaths() {
  return await getArtifactPaths();
}
const { artifact } = Astro.params;
// Props come directly from getArtifactPaths
const { fileName, name, path: filePath, metadata } = Astro.props;

if (!fileName) {
  return Astro.redirect('/404');
}
// Get the component from the artifactComponents map
// Remove .jsx or .tsx extension if it exists in the fileName
const componentName = fileName.replace(/\.(jsx|tsx)$/, '');

// Get the adjacent artifacts for navigation
const { previousArtifact, nextArtifact } = getAdjacentArtifacts(name);
---
<Layout title={`${siteConfig.title} - ${name}`}>
  <div class="container mx-auto px-4 py-8">
    <header class="mb-8">
      <a href="/" class="text-blue-500 hover:text-blue-700 mb-2 inline-block">
        &larr; Back to all artifacts
      </a>
      
      <div class="flex justify-between items-center my-4">
        {previousArtifact && (
          <a href={`/artifacts/${previousArtifact.name}`} class="text-blue-500 hover:text-blue-700 flex items-center px-3 py-2 border border-blue-300 rounded-md transition-colors duration-200 hover:bg-blue-50">
            <span class="mr-2">&larr;</span>
            <span class="inline">Previous</span>
            <span class="hidden sm:inline ml-1">: {previousArtifact.metadata.title || previousArtifact.name}</span>
          </a>
        )}
        {nextArtifact && (
          <a href={`/artifacts/${nextArtifact.name}`} class="text-blue-500 hover:text-blue-700 flex items-center px-3 py-2 border border-blue-300 rounded-md transition-colors duration-200 hover:bg-blue-50">
            <span class="inline">Next</span>
            <span class="hidden sm:inline mr-1">: {nextArtifact.metadata.title || nextArtifact.name}</span>
            <span class="ml-2">&rarr;</span>
          </a>
        )}
      </div>
      
      <h1 class="text-3xl font-bold">{name}</h1>
      {metadata?.description && siteConfig.artifacts.showDescription && (
        <p class="text-gray-600 mt-2">{metadata.description}</p>
      )}
    </header>

    <div class="bg-white rounded-lg shadow-md p-6">
      {/* Render the React component */}
      <div id="artifact-container" data-artifact-name={fileName}>
        <ArtifactRenderer client:load componentName={componentName} />
      </div>
    </div>
  </div>
</Layout>

